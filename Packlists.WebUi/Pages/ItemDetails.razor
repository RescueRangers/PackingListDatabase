@page "/itemdetails/{text}"
@using Packilists.Shared.Data
@inject HttpClient Http
@inject IMatToaster Toaster

<h3>Item Details</h3>

@if (_item == null)
{
    <p>Loading...</p>
}
else
{
    <h4>@_item.ItemName</h4>

    @if (_item.Materials == null || _item.Materials.Count == 0)
    {
        <p class="text-danger">Item has no materials, please add it below</p>
    }
    else
    {
        <MatTable Items="@_item.Materials" LoadInitialData="false" PageSize="25">
            <MatTableHeader>
                <th>Material</th>
                <th>Quantity</th>
                <th>Unit</th>
                <th></th>
            </MatTableHeader>
            <MatTableRow Context="Material">
                <td>@Material.MaterialName</td>
                <td>@Material.Amount</td>
                <td>@Material.Unit</td>
                <td>
                    <a class="text-info" href="#"><MatIcon Icon="@MatIconNames.Remove_red_eye"></MatIcon></a>
                    <a class="text-danger" href="#"><MatIcon Icon="@MatIconNames.Remove_circle_outline"></MatIcon></a>
                </td>
            </MatTableRow>
        </MatTable>
    }

    <MatButton OnClick="@(() => _isAdding = true)">Add material</MatButton>

    <MatDialog IsOpen="@_isAdding">
        <MatDialogTitle>Add Material</MatDialogTitle>
        <MatDialogContent>
            <MatSelect @bind-Value="@_selectedMaterialId">
                <MatOption Value=""></MatOption>
                @foreach (var item in _materials)
                {
                    <MatOption Value="@item.MaterialId.ToString()">@item.MaterialName</MatOption>
                }
            </MatSelect>
            <MatNumericUpDownField Label="Quantity" @bind-Value="@_amount" DecimalPlaces="3" Maximum="5000"></MatNumericUpDownField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(() => _isAdding = false)">Cancel</MatButton>
            <MatButton OnClick="@AddClick">Add</MatButton>
        </MatDialogActions>
    </MatDialog>
}

@code {
    [Parameter] public string Text { get; set; }
    Item _item;
    bool _isAdding;
    Material[] _materials;
    string _selectedMaterialId;
    decimal? _amount;

    protected override async Task OnInitializedAsync()
    {
        _item = await Http.GetJsonAsync<Item>($"api/items/{Text}");
        _materials = await Http.GetJsonAsync<Material[]>("api/materials");
        
    }

    private async Task AddClick()
    {
        if (!string.IsNullOrWhiteSpace(_selectedMaterialId))
        {
            var materialId = int.Parse(_selectedMaterialId);

            var materialAmount = new MaterialAmount { MaterialId = materialId, ItemId = _item.ItemId, Amount = (float)_amount };

            await Http.PostJsonAsync<MaterialAmount>("api/Materials/amounts", materialAmount);
        }
        else
        {
            Toaster.Add("Could not add material", MatToastType.Danger);
        }

    }
}
